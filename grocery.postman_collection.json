{
	"info": {
		"_postman_id": "17bc700b-8c33-46c5-a924-c7e9bd129f28",
		"name": "grocery",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32964529",
		"_collection_link": "https://universal-trinity-280605.postman.co/workspace/New-Team-Workspace~8129a596-bd17-4616-b1c8-2e85aa995766/collection/32964529-17bc700b-8c33-46c5-a924-c7e9bd129f28?action=share&source=collection_link&creator=32964529"
	},
	"item": [
		{
			"name": "status",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json(); \r",
							"pm.environment.set(\"userId\", response.id); \r",
							"pm.collectionVariables.set(\"userEmail\", response.email); \r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://simple-grocery-store-api.glitch.me/status",
					"protocol": "https",
					"host": [
						"simple-grocery-store-api",
						"glitch",
						"me"
					],
					"path": [
						"status"
					]
				}
			},
			"response": []
		},
		{
			"name": "get-status Copy",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://simple-grocery-store-api.online/",
					"protocol": "http",
					"host": [
						"simple-grocery-store-api",
						"online"
					],
					"path": [
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "get-all-products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is within an acceptable range\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the schema for each product object - id, category, name, and inStock properties\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(product) {\r",
							"        pm.expect(product).to.be.an('object');\r",
							"        pm.expect(product).to.have.property('id');\r",
							"        pm.expect(product).to.have.property('category');\r",
							"        pm.expect(product).to.have.property('name');\r",
							"        pm.expect(product).to.have.property('inStock');\r",
							"    });\r",
							"});\r",
							"var template = `\r",
							"<style type=\"text/css\">\r",
							"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
							"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
							"    .tftable tr {background-color:#ffffff;}\r",
							"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
							"    .tftable tr:hover {background-color:#e0ffff;}\r",
							"</style>\r",
							"\r",
							"<table class=\"tftable\" border=\"1\">\r",
							"    <tr>\r",
							"        <th>ID</th>\r",
							"        <th>Category</th>\r",
							"        <th>Name</th>\r",
							"        <th>In Stock</th>\r",
							"    </tr>\r",
							"    \r",
							"    {{#each response}}\r",
							"        <tr>\r",
							"            <td>{{id}}</td>\r",
							"            <td>{{category}}</td>\r",
							"            <td>{{name}}</td>\r",
							"            <td>{{#if inStock}}Yes{{else}}No{{/if}}</td>\r",
							"        </tr>\r",
							"    {{/each}}\r",
							"</table>\r",
							"`;\r",
							"\r",
							"function constructVisualizerPayload() {\r",
							"    return {response: pm.response.json()}\r",
							"}\r",
							"\r",
							"pm.visualizer.set(template, constructVisualizerPayload());\r",
							"\r",
							"let response = pm.response.json();\r",
							"pm.environment.set(\"userId\", response.userId);\r",
							"pm.environment.set(\"orderId\", response.orderId);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://simple-grocery-store-api.glitch.me/products",
					"protocol": "https",
					"host": [
						"simple-grocery-store-api",
						"glitch",
						"me"
					],
					"path": [
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "products-bycategory",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Fixed the test to accurately validate the response data\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is within acceptable range\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Content type is application/json\", function () {\r",
							"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the required fields - id, category, name, and inStock\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    \r",
							"    responseData.forEach(function(product) {\r",
							"        pm.expect(product).to.have.property('id').that.is.a('number');\r",
							"        pm.expect(product).to.have.property('category').that.is.a('string').and.to.have.lengthOf.at.least(1);\r",
							"        pm.expect(product).to.have.property('name').that.is.a('string').and.to.have.lengthOf.at.least(1);\r",
							"        pm.expect(product).to.have.property('inStock').that.is.a('boolean');\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Validate product attributes\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    \r",
							"    responseData.forEach(function(product) {\r",
							"        pm.expect(product.id).to.be.a('number').and.to.be.at.least(0, \"ID should be a non-negative integer\");\r",
							"        pm.expect(product.category).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Category should be a non-empty string\");\r",
							"        pm.expect(product.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should be a non-empty string\");\r",
							"        pm.expect(product.inStock).to.be.a('boolean', \"inStock should be a boolean value\");\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://simple-grocery-store-api.glitch.me/products?category=candy",
					"protocol": "https",
					"host": [
						"simple-grocery-store-api",
						"glitch",
						"me"
					],
					"path": [
						"products"
					],
					"query": [
						{
							"key": "category",
							"value": "candy"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "create-cart",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 201\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(201);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - created and cartId\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.created).to.exist;\r",
							"    pm.expect(responseData.cartId).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Created field is a boolean\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.created).to.be.a('boolean');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"CartId is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.cartId).to.be.a('string').and.to.have.lengthOf.at.least(1, \"CartId should be a non-empty string\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"var template = `\r",
							"<style type=\"text/css\">\r",
							"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
							"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
							"    .tftable tr {background-color:#ffffff;}\r",
							"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
							"    .tftable tr:hover {background-color:#e0ffff;}\r",
							"</style>\r",
							"\r",
							"<table class=\"tftable\" border=\"1\">\r",
							"    <tr>\r",
							"        <th>Created</th>\r",
							"        <th>Cart ID</th>\r",
							"    </tr>\r",
							"    <tr>\r",
							"        <td>{{response.created}}</td>\r",
							"        <td>{{response.cartId}}</td>\r",
							"    </tr>\r",
							"</table>\r",
							"`;\r",
							"\r",
							"function constructVisualizerPayload() {\r",
							"    return {response: pm.response.json()}\r",
							"}\r",
							"\r",
							"pm.visualizer.set(template, constructVisualizerPayload());"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"user_id\": \"12345\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://simple-grocery-store-api.glitch.me/carts",
					"protocol": "https",
					"host": [
						"simple-grocery-store-api",
						"glitch",
						"me"
					],
					"path": [
						"carts"
					]
				}
			},
			"response": []
		},
		{
			"name": "get-cart-id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"userId\", pm.response.json().id);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://simple-grocery-store-api.glitch.me/carts/jiddI8csFR7YV5YV08VdJ",
					"protocol": "https",
					"host": [
						"simple-grocery-store-api",
						"glitch",
						"me"
					],
					"path": [
						"carts",
						"jiddI8csFR7YV5YV08VdJ"
					]
				}
			},
			"response": []
		},
		{
			"name": "get-cart-item",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://simple-grocery-store-api.glitch.me/carts/xEgfB0v5ilaJovU1L_1UN/items",
					"protocol": "https",
					"host": [
						"simple-grocery-store-api",
						"glitch",
						"me"
					],
					"path": [
						"carts",
						"xEgfB0v5ilaJovU1L_1UN",
						"items"
					]
				}
			},
			"response": []
		},
		{
			"name": "add-cart-item",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"productId\": 4646,\r\n  \"quantity\": 2\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://simple-grocery-store-api.glitch.me/carts/yrwYZqROH_vTIU_n-CGh-/items",
					"protocol": "https",
					"host": [
						"simple-grocery-store-api",
						"glitch",
						"me"
					],
					"path": [
						"carts",
						"yrwYZqROH_vTIU_n-CGh-",
						"items"
					]
				}
			},
			"response": []
		},
		{
			"name": "API-CLIENT-FOR-AUTH",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"clientName\": \"Postman on Valentin's computer\",\r\n    \"clientEmail\": \"valentin1234@example.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://simple-grocery-store-api.glitch.me/api-clients",
					"protocol": "https",
					"host": [
						"simple-grocery-store-api",
						"glitch",
						"me"
					],
					"path": [
						"api-clients"
					]
				}
			},
			"response": []
		},
		{
			"name": "create-order",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"cartId\": \"Vv6z0wW2-IP10Y9ekEqsr\",\r\n    \"customerName\": \"John Doe\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://simple-grocery-store-api.glitch.me/orders",
					"protocol": "https",
					"host": [
						"simple-grocery-store-api",
						"glitch",
						"me"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "display-all-orders",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://simple-grocery-store-api.glitch.me/orders",
					"protocol": "https",
					"host": [
						"simple-grocery-store-api",
						"glitch",
						"me"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "single-order",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://simple-grocery-store-api.glitch.me/orders/o9UBTIBeXKUL4VrvA-kao",
					"protocol": "https",
					"host": [
						"simple-grocery-store-api",
						"glitch",
						"me"
					],
					"path": [
						"orders",
						"o9UBTIBeXKUL4VrvA-kao"
					]
				}
			},
			"response": []
		},
		{
			"name": "update-order",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"customerName\": \"Jane Smith\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://simple-grocery-store-api.glitch.me/orders/o9UBTIBeXKUL4VrvA-kao",
					"protocol": "https",
					"host": [
						"simple-grocery-store-api",
						"glitch",
						"me"
					],
					"path": [
						"orders",
						"o9UBTIBeXKUL4VrvA-kao"
					]
				}
			},
			"response": []
		},
		{
			"name": "replace",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"cartId\": \"Vv6z0wW2-IP10Y9ekEqsr\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://simple-grocery-store-api.glitch.me/orders/o9UBTIBeXKUL4VrvA-kao/replace",
					"protocol": "https",
					"host": [
						"simple-grocery-store-api",
						"glitch",
						"me"
					],
					"path": [
						"orders",
						"o9UBTIBeXKUL4VrvA-kao",
						"replace"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://simple-grocery-store-api.glitch.me/carts/yrwYZqROH_vTIU_n-CGh-/items/369358467",
					"protocol": "https",
					"host": [
						"simple-grocery-store-api",
						"glitch",
						"me"
					],
					"path": [
						"carts",
						"yrwYZqROH_vTIU_n-CGh-",
						"items",
						"369358467"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete2",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://simple-grocery-store-api.glitch.me/orders/o9UBTIBeXKUL4VrvA-kao",
					"protocol": "https",
					"host": [
						"simple-grocery-store-api",
						"glitch",
						"me"
					],
					"path": [
						"orders",
						"o9UBTIBeXKUL4VrvA-kao"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "userEmail",
			"value": ""
		}
	]
}